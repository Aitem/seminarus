#+TITLE: ElasticSearch
#+AUTHOR: M. Surmashev @muradbei

* Elastic Stack

  - =Elasticsearch= - is the distributed search and analytics engine at the heart of the Elastic Stack.
  - =Logstash= and =Beats= - facilitate collecting, aggregating, and enriching your data and storing it in Elasticsearch.
  - =Kibana= - enables you to interactively explore, visualize, and share insights into your data and manage and monitor the stack.

* ElasticSearch

  =Elasticsearch= is a distributed document store.

  [[https://lucene.apache.org/][Lucene]], the Java libraries on which Elasticsearch is based

  Instead of storing information as rows of columnar data, Elasticsearch stores complex data structures that have been serialized as JSON documents.

  Text fields are stored in inverted indices, and numeric and geo fields are stored in BKD trees.

* ES basic concepts

  - =Cluster= - group of nodes
  - =Node= - physical instance of ES ([[https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html][node types]])
  - =Index= - logical namespace
  - =Shard= - Lucene instance
    - =Primary shard= - first indexing shard
    - =Replica shard= - recovery and load balancing
  - =Document= - json document

* Run ES

  #+name: docker-compose.yaml
  #+BEGIN_SRC sh :results value drawer
    cat docker-compose.yaml
  #+END_SRC

  #+RESULTS: docker-compose.yaml
  :RESULTS:
  version: '3.1'
  services:
    seminar-es-master:
      image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
      volumes:
	- ./esdata_master:/usr/share/elasticsearch/data
      environment:
	- cluster.name=seminar-es
	- node.name=master
	- node.master=true
	- discovery.zen.minimum_master_nodes=1
	- discovery.seed_hosts=seminar-es-slave
	- cluster.initial_master_nodes=master
      ports:
	- "9202:9200"

    seminar-es-slave:
      image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
      volumes:
	- ./esdata_slave:/usr/share/elasticsearch/data
      environment:
	- cluster.name=seminar-es
	- node.name=slave
	- node.master=false
	- discovery.zen.minimum_master_nodes=1
	- discovery.seed_hosts=seminar-es-master
	- cluster.initial_master_nodes=master
      ports:
	- "9201:9200"

    kibana:
      links:
	- "seminar-es-master:es"
      image: docker.elastic.co/kibana/kibana:7.0.0
      ports:
	- "5602:5601"
      environment:
	ELASTICSEARCH_HOSTS: http://es:9200
  :END:


  #+name: Run ES
  #+BEGIN_SRC sh :results value drawer
    docker-compose up -d
  #+END_SRC

  #+RESULTS: Run ES
  :RESULTS:
  :END:

  #+name: Check ES cluster health
  #+BEGIN_SRC sh :results value drawer
    curl http://localhost:9202/_cluster/health | jq
  #+END_SRC

  #+RESULTS: Check ES cluster health
  :RESULTS:
  {
    "cluster_name": "seminar-es",
    "status": "green",
    "timed_out": false,
    "number_of_nodes": 2,
    "number_of_data_nodes": 2,
    "active_primary_shards": 20,
    "active_shards": 40,
    "relocating_shards": 0,
    "initializing_shards": 0,
    "unassigned_shards": 0,
    "delayed_unassigned_shards": 0,
    "number_of_pending_tasks": 0,
    "number_of_in_flight_fetch": 0,
    "task_max_waiting_in_queue_millis": 0,
    "active_shards_percent_as_number": 100
  }
  :END:


  #+name: Check ES shards info
  #+BEGIN_SRC sh :results value drawer
    curl http://localhost:9202/_cat/shards/audit_log_2021_06 #?format=JSON | jq
  #+END_SRC

  #+RESULTS: Check ES shards info
  :RESULTS:
  audit_log_2021_06 1 p STARTED 2 32.5kb 172.24.0.2 master
  audit_log_2021_06 1 r STARTED 2 32.5kb 172.24.0.3 slave
  audit_log_2021_06 0 p STARTED 2 32.3kb 172.24.0.2 master
  audit_log_2021_06 0 r STARTED 2 32.3kb 172.24.0.3 slave
  :END:

* Create Index

  #+name: Create index
  #+BEGIN_SRC sh :results value drawer
    curl -X PUT http://localhost:9202/testindex_4?pretty \
	 -H 'Content-Type: application/json' \
	 -d '{"settings": {
	        "index": {
	          "number_of_shards":   2,
	          "number_of_replicas": 1}}}'
  #+END_SRC

  #+RESULTS: Create index
  :RESULTS:
  {
    "acknowledged" : true,
    "shards_acknowledged" : true,
    "index" : "testindex_4"
  }
  :END:

  #+name: Check ES index
  #+BEGIN_SRC sh :results value drawer
    curl http://localhost:9202/_cat/indices/testindex_4?bytes=b&s=store.size:desc,index:asc
  #+END_SRC

  #+RESULTS: Check ES index
  :RESULTS:
  green open testindex_4 epPJ8z2VTW2yp9hii9IAag 2 1 0 0 920 460
  :END:


  #+name: Check ES index shards
  #+BEGIN_SRC sh :results value drawer
    curl http://localhost:9202/_cat/shards?h=index,shard,prirep,state,node,unassigned.reason #| grep UNASSIGNED
  #+END_SRC

  #+RESULTS: Check ES index shards
  :RESULTS:
  logs_2021_06             1 r STARTED master
  logs_2021_06             1 p STARTED slave
  logs_2021_06             0 p STARTED master
  logs_2021_06             0 r STARTED slave
  audit_log_2021_06        1 p STARTED master
  audit_log_2021_06        1 r STARTED slave
  audit_log_2021_06        0 p STARTED master
  audit_log_2021_06        0 r STARTED slave
  some_new_index1          1 r STARTED master
  some_new_index1          1 p STARTED slave
  some_new_index1          0 r STARTED master
  some_new_index1          0 p STARTED slave
  .kibana_task_manager_2   0 r STARTED master
  .kibana_task_manager_2   0 p STARTED slave
  .kibana_task_manager_1   0 p STARTED master
  .kibana_task_manager_1   0 r STARTED slave
  testindex_4              1 r STARTED master
  testindex_4              1 p STARTED slave
  testindex_4              0 p STARTED master
  testindex_4              0 r STARTED slave
  .apm-agent-configuration 1 p STARTED master
  .apm-agent-configuration 1 r STARTED slave
  .apm-agent-configuration 0 r STARTED master
  .apm-agent-configuration 0 p STARTED slave
  .kibana_2                0 r STARTED master
  .kibana_2                0 p STARTED slave
  .kibana_1                0 r STARTED master
  .kibana_1                0 p STARTED slave
  new_index                1 p STARTED master
  new_index                1 r STARTED slave
  new_index                0 p STARTED master
  new_index                0 r STARTED slave
  testindex                1 p STARTED master
  testindex                1 r STARTED slave
  testindex                0 p STARTED master
  testindex                0 r STARTED slave
  .tasks                   0 r STARTED master
  .tasks                   0 p STARTED slave
  some_new_index           1 p STARTED master
  some_new_index           1 r STARTED slave
  some_new_index           0 r STARTED master
  some_new_index           0 p STARTED slave
  .slm-history-1-000001    0 r STARTED master
  .slm-history-1-000001    0 p STARTED slave
  :END:


  #+name: Describe Check ES index shard status
  #+BEGIN_SRC sh :results value drawer
    curl http://localhost:9202/_cluster/allocation/explain -H 'Content-Type:application/json' -d '{"index": "audit_log_2021_06", "shard": 1, "primary": false}' | jq
  #+END_SRC

  #+RESULTS: Describe Check ES index shard status
  :RESULTS:
  {
    "index": "audit_log_2021_06",
    "shard": 1,
    "primary": false,
    "current_state": "started",
    "current_node": {
      "id": "pC3B91vMTz2jqD-MypMSkQ",
      "name": "slave",
      "transport_address": "172.24.0.3:9300",
      "attributes": {
	"ml.machine_memory": "6237151232",
	"ml.max_open_jobs": "20",
	"xpack.installed": "true"
      },
      "weight_ranking": 1
    },
    "can_remain_on_current_node": "yes",
    "can_rebalance_cluster": "yes",
    "can_rebalance_to_other_node": "no",
    "rebalance_explanation": "cannot rebalance as no target node exists that can both allocate this shard and improve the cluster balance",
    "node_allocation_decisions": [
      {
	"node_id": "folcyw8yTPyKtBv3_i3qjg",
	"node_name": "master",
	"transport_address": "172.24.0.2:9300",
	"node_attributes": {
	  "ml.machine_memory": "6237151232",
	  "xpack.installed": "true",
	  "ml.max_open_jobs": "20"
	},
	"node_decision": "no",
	"weight_ranking": 1,
	"deciders": [
	  {
	    "decider": "same_shard",
	    "decision": "NO",
	    "explanation": "the shard cannot be allocated to the same node on which a copy of the shard already exists [[audit_log_2021_06][1], node[folcyw8yTPyKtBv3_i3qjg], [P], s[STARTED], a[id=SVWxvxhnSNygXnWUtLeAoA]]"
	  }
	]
      }
    ]
  }
  :END:

* Index template

  #+BEGIN_SRC sh :results value drawer
    curl -X PUT http://localhost:9202/_template/main_template \
	 -H 'Content-Type: application/json' \
	 -d '{"index_patterns": ["*"],
              "settings": {
                "number_of_shards": 2,
	        "number_of_replicas": 1}}'
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  {"acknowledged":true}
  :END:


  #+BEGIN_SRC sh :results value drawer
    curl http://localhost:9202/_template/main_template | jq
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  {
    "main_template": {
      "order": 0,
      "index_patterns": [
	"*"
      ],
      "settings": {
	"index": {
	  "number_of_shards": "2",
	  "number_of_replicas": "1"
	}
      },
      "mappings": {},
      "aliases": {}
    }
  }
  :END:


  #+BEGIN_SRC sh :results value drawer
    curl -X PUT http://localhost:9202/some_new_index66 | jq
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  {
    "acknowledged": true,
    "shards_acknowledged": true,
    "index": "some_new_index66"
  }
  :END:

  #+name: Index status
  #+BEGIN_SRC sh :results value drawer
    curl http://localhost:9202/_cat/indices/some_new_index66?format=JSON | jq
  #+END_SRC

  #+RESULTS: Index status
  :RESULTS:
  [
    {
      "health": "green",
      "status": "open",
      "index": "some_new_index66",
      "uuid": "1OpbzPuKRhKfk4kRrKk8Vw",
      "pri": "2",
      "rep": "1",
      "docs.count": "0",
      "docs.deleted": "0",
      "store.size": "920b",
      "pri.store.size": "460b"
    }
  ]
  :END:

  #+RESULTS:
  :RESULTS:
  [
    {
      "health": "green",
      "status": "open",
      "index": "some_new_index",
      "uuid": "q3VcEwSBQEG9QassyrX9GQ",
      "pri": "2",
      "rep": "1",
      "docs.count": "0",
      "docs.deleted": "0",
      "store.size": "1.1kb",
      "pri.store.size": "566b"
    }
  ]
  :END:

* Insert data

  #+name: Insert index document
  #+BEGIN_SRC sh :results value drawer
    curl -X POST http://localhost:9202/testindex/_doc \
	 -H 'Content-Type: application/json' \
	 -d '{"@timestamp": "2021-06-24T18:04:00", "name": "Vlad"}' | jq
  #+END_SRC

  #+RESULTS: Insert index document
  :RESULTS:
  {
    "_index": "testindex",
    "_type": "_doc",
    "_id": "8oTpPnoBl4dUYzj6GVrM",
    "_version": 1,
    "result": "created",
    "_shards": {
      "total": 2,
      "successful": 2,
      "failed": 0
    },
    "_seq_no": 8,
    "_primary_term": 7
  }
  :END:

  #+name: Index 'testindex' status
  #+BEGIN_SRC sh :results value drawer
    curl http://localhost:9202/_cat/indices/testindex?format=JSON | jq
  #+END_SRC

  #+RESULTS: Index 'testindex' status
  :RESULTS:
  [
    {
      "health": "green",
      "status": "open",
      "index": "testindex",
      "uuid": "giumOm5DR9G8IBhJXm7YXA",
      "pri": "2",
      "rep": "1",
      "docs.count": "8",
      "docs.deleted": "0",
      "store.size": "21.2kb",
      "pri.store.size": "10.6kb"
    }
  ]
  :END:


  #+name: Insert index document with another 'name' type
  #+BEGIN_SRC sh :results value drawer
    curl -X POST http://localhost:9202/testindex/_doc \
	 -H 'Content-Type: application/json' \
	 -d '{"@timestamp": "2021-06-24T18:00:00", "name": [{"foo": 12}]}' | jq
  #+END_SRC

  #+RESULTS: Insert index document with another 'name' type
  :RESULTS:
  {
    "error": {
      "root_cause": [
	{
	  "type": "mapper_parsing_exception",
	  "reason": "failed to parse field [name] of type [text] in document with id '7oTPPnoBl4dUYzj6Xlpl'. Preview of field's value: '{foo=12}'"
	}
      ],
      "type": "mapper_parsing_exception",
      "reason": "failed to parse field [name] of type [text] in document with id '7oTPPnoBl4dUYzj6Xlpl'. Preview of field's value: '{foo=12}'",
      "caused_by": {
	"type": "illegal_state_exception",
	"reason": "Can't get text on a START_OBJECT at 1:48"
      }
    },
    "status": 400
  }
  :END:

* Search

  Great [[https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html][search api]] and [[https://www.elastic.co/guide/en/elasticsearch/reference/current/search-your-data.html][ES search documentation]]

  #+name: Search Aitem or Niquola
  #+BEGIN_SRC sh :results value drawer
    curl -X POST http://localhost:9202/testindex/_search \
	 -H 'Content-Type: application/json' \
	 -d '
       {"sort": [{"@timestamp": {"order": "desc"}}],
	"query": {"bool": {"must": [{"term": {"name.keyword": "Niquola"}}]
			   }}} ' | jq  .hits.hits[]._source
  #+END_SRC

  #+RESULTS: Search Aitem or Niquola
  :RESULTS:
  {
    "@timestamp": "2021-06-24T18:00:00",
    "name": "Niquola"
  }
  :END:


  #+name: Agg
  #+BEGIN_SRC sh :results value drawer
    curl -X POST http://localhost:9202/testindex/_search \
	 -H 'Content-Type: application/json' \
	 -d '
	 {"aggs": {"name_agg": {"terms": {"field": "name.keyword"},
                                "aggs": {"avgts": {"avg": {"field": "@timestamp"} },
                                         "min": {"min": {"field": "@timestamp"} },
                                         "max": {"max": {"field": "@timestamp"} }}}},
	  "query": {"constant_score": {"filter": {"match": {"name": "vlad"}}}}}
' | jq .aggregations #.avgts
  #+END_SRC

  #+RESULTS: Agg
  :RESULTS:
  {
    "name_agg": {
      "doc_count_error_upper_bound": 0,
      "sum_other_doc_count": 0,
      "buckets": [
	{
	  "key": "Vlad",
	  "doc_count": 5,
	  "min": {
	    "value": 1624557600000,
	    "value_as_string": "2021-06-24T18:00:00.000Z"
	  },
	  "max": {
	    "value": 1624557840000,
	    "value_as_string": "2021-06-24T18:04:00.000Z"
	  },
	  "avgts": {
	    "value": 1624557744000,
	    "value_as_string": "2021-06-24T18:02:24.000Z"
	  }
	}
      ]
    }
  }
  :END:

** Another way

  #+name: KQL
  #+BEGIN_SRC sh :results value drawer
    curl -X POST http://localhost:9202/testindex/_search \
	 -H 'Content-Type: application/json' \
	 -d ' {"query":
               {"query_string" : {"query" : "name: (*niq* or *ai*) "}}}
            ' | jq .hits.hits[]._source
  #+END_SRC

  #+RESULTS: KQL
  :RESULTS:
  {
    "name": "Aitem"
  }
  {
    "name": "Aitem"
  }
  {
    "name": "Aitem"
  }
  {
    "name": "Aitem"
  }
  {
    "name": "Aitem"
  }
  {
    "@timestamp": "2021-06-24T18:00:00",
    "name": "Aitem"
  }
  {
    "@timestamp": "2021-06-24T18:00:00",
    "name": "Niquola"
  }
  {
    "name": "Aitem"
  }
  {
    "name": "Aitem"
  }
  {
    "@timestamp": "2021-06-24T18:00:00",
    "name": "Aitem"
  }
  :END:

  =SQL= - [[https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-rest.html#sql-rest][SQL REST API]]


  #+name: SQL
  #+BEGIN_SRC sh :results value drawer
    curl -X POST http://localhost:9202/_sql?format=txt \
	 -H 'Content-Type: application/json' \
	 -d "{\"query\": \"SELECT * FROM testindex where name LIKE '%Ai%' LIMIT 50\"} " #| jq
  #+END_SRC

  #+RESULTS: SQL
  :RESULTS:
	 @timestamp       |     name
  ------------------------+---------------
  null                    |Aitem
  null                    |Aitem
  null                    |Aitem
  null                    |Aitem
  null                    |Aitem
  null                    |Aitem
  null                    |Aitem
  2021-06-24T18:00:00.000Z|Aitem
  2021-06-24T18:00:00.000Z|Aitem
  :END:
